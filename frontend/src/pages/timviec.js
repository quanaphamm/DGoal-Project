import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import "./timviec.css";
import { getJobs } from "../services/api"; // ‚úÖ Import API function

const TimViec = () => {
    const [jobs, setJobs] = useState([]); // ‚úÖ Store job listings
    const [selectedJob, setSelectedJob] = useState(null);
    const [loading, setLoading] = useState(true); // ‚úÖ Show loading state
    const [error, setError] = useState(""); // ‚úÖ Handle errors
    const location = useLocation();

    useEffect(() => {
        // ‚úÖ Fetch jobs from backend
        async function fetchJobs() {
            try {
                console.log("üîÑ Fetching jobs...");
                const response = await getJobs(); // ‚úÖ Fetch from API
                console.log("‚úÖ Fetched Jobs:", response.jobs);

                // ‚úÖ Ensure jobs exist
                if (!response.jobs || response.jobs.length === 0) {
                    setError("Kh√¥ng c√≥ c√¥ng vi·ªác n√†o.");
                    return;
                }

                setJobs(response.jobs);

                // ‚úÖ Check for job selection in URL
                const queryParams = new URLSearchParams(location.search);
                const jobIdFromURL = parseInt(queryParams.get("jobId"));

                if (jobIdFromURL) {
                    const jobToSelect = response.jobs.find(job => job.id === jobIdFromURL);
                    if (jobToSelect) {
                        setSelectedJob(jobToSelect);
                    }
                } else {
                    setSelectedJob(response.jobs[0]); // ‚úÖ Default to first job
                }
            } catch (error) {
                console.error("‚ùå Error fetching jobs:", error);
                setError("L·ªói khi t·∫£i danh s√°ch c√¥ng vi·ªác.");
            } finally {
                setLoading(false); // ‚úÖ Hide loading
            }
        }
        fetchJobs();
    }, [location.search]); // ‚úÖ Fetch jobs on page load or URL change

    return (
        <div className="timviec-container">
            {/* ‚úÖ Job List Section */}
            <div className="job-list">
                {loading ? (
                    <p className="loading-message">ƒêang t·∫£i c√¥ng vi·ªác...</p>
                ) : error ? (
                    <p className="error-message">{error}</p>
                ) : (
                    jobs.map((job) => (
                        <div
                            key={job.id}  // ‚úÖ Ensured Unique Key
                            className={`job-item ${selectedJob?.id === job.id ? "selected" : ""}`} 
                            onClick={() => setSelectedJob(job)}
                        >
                            <h3>{job.title}</h3>
                            <p><strong>{job.company}</strong></p>
                            <p className="salary">üí∞ {job.salary}</p>
                            <p className="location">üìç {job.location}</p>
                            <p className="type">‚è≥ {job.type}</p>
                        </div>
                    ))
                )}
            </div>

            {/* ‚úÖ Job Details Section */}
            <div className="job-details">
                {selectedJob && (
                    <div className="job-details-container">
                        <p className="company">{selectedJob.company}</p>
                        <h2 className="job-title">{selectedJob.title}</h2>

                        <div className="divider"></div>

                        <p className="label">üí∞ L∆∞∆°ng: <span className="salary">{selectedJob.salary}</span></p>
                        <p className="label">üìç ƒê·ªãa ƒëi·ªÉm: <span className="location">{selectedJob.location}</span></p>
                        <p className="label">‚è≥ Lo·∫°i h√¨nh: <span className="type">{selectedJob.type}</span></p>

                        <div className="divider"></div>

                        <div className="job-description">
                            <strong>üìã M√¥ t·∫£ c√¥ng vi·ªác:</strong>
                            <p>{selectedJob.description}</p>
                        </div>

                        <div className="divider"></div>

                        <div className="job-requirements">
                            <strong>üõ† Y√™u c·∫ßu c√¥ng vi·ªác:</strong>
                            <p>{selectedJob.requirements ? selectedJob.requirements : "Kh√¥ng c√≥ y√™u c·∫ßu c·ª• th·ªÉ."}</p>
                        </div>

                        <div className="button-group">
                            <button className="save-btn">‚≠ê L∆∞u</button>
                            <button className="apply-btn">üì© ·ª®ng tuy·ªÉn</button>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default TimViec;
